<%

request = OpenSSL::X509::Request.new @csr.content

if !(request.verify request.public_key)
  form_content = 'CSR can not be verified'
else
  csr_cert = OpenSSL::X509::Certificate.new
  csr_cert.serial = 0
  csr_cert.version = 2
  csr_cert.not_before = Time.now
  csr_cert.not_after = Time.now + (60 * 60 * 24 * 365 * 2)  # 2 years
  
  csr_cert.subject = request.subject
  csr_cert.public_key = request.public_key
  csr_cert.issuer = request.subject  # TODO use CA from form, csr_cert.issuer = ca_cert.subject
  
  extension_factory = OpenSSL::X509::ExtensionFactory.new
  extension_factory.subject_certificate = csr_cert
  extension_factory.issuer_certificate = csr_cert  # TODO use CA from form, extension_factory.issuer_certificate = ca_cert
  
  csr_cert.add_extension    extension_factory.create_extension('basicConstraints', 'CA:FALSE')
  csr_cert.add_extension    extension_factory.create_extension('keyUsage', 'keyEncipherment,dataEncipherment,digitalSignature')
  csr_cert.add_extension    extension_factory.create_extension('subjectKeyIdentifier', 'hash')
  
  ca_key = key = OpenSSL::PKey::RSA.new 4096       # TODO use CA from form
  csr_cert.sign ca_key, OpenSSL::Digest::SHA1.new  # TODO use CA from form, csr_cert.sign ca_key, OpenSSL::Digest::SHA1.new
  
  form_content = csr_cert.to_pem
end

%>

// only fill name-field with autogenerated name if it is empty
if( $('#name').val().length === 0 ) {
  $('#name').val ('<%= @csr.name %>');
}

// fill csr content into forms content field
  $('#content').val ('<%= j form_content %>');
