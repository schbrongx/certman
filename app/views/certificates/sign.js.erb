<%
  # use privatekey from _form.html.erb 
  key = OpenSSL::PKey::RSA.new @keypair.privatekey

  options = { 
    :commonname       => @csr.cn,
    :organization     => @csr.o,
	:org_unit         => @csr.ou,
    :location         => @csr.l,
    :state            => @csr.s,
    :country          => @csr.c,
    :email            => @csr.email,
  }
  
  request = OpenSSL::X509::Request.new
  request.version    = 0 
  request.subject    = OpenSSL::X509::Name.new([
    ['CN',             options[:commonname],   OpenSSL::ASN1::UTF8STRING],
    ['O',              options[:organization], OpenSSL::ASN1::UTF8STRING],
    ['OU',             options[:org_unit],     OpenSSL::ASN1::UTF8STRING],
    ['L',              options[:location],     OpenSSL::ASN1::PRINTABLESTRING],
    ['ST',             options[:state],        OpenSSL::ASN1::PRINTABLESTRING],
    ['C',              options[:country],      OpenSSL::ASN1::PRINTABLESTRING],
    ['emailAddress',   options[:email],        OpenSSL::ASN1::UTF8STRING]
  ])  
  request.public_key = key.public_key
  
  csr_cert = OpenSSL::X509::Certificate.new
  csr_cert.serial = 0
  csr_cert.version = 2
  csr_cert.not_before = Time.now
  csr_cert.not_after = Time.now + 600
  
  csr_cert.subject = request.subject
  csr_cert.public_key = request.public_key
# TODO - replace issuer subject with subject from CA certificate
#      - if no CA certificate present -> use requests subject (=selfsigning) 
#  csr_cert.issuer = ca_cert.subject
  csr_cert.issuer = request.subject
  
  extension_factory = OpenSSL::X509::ExtensionFactory.new
  extension_factory.subject_certificate = csr_cert
# TODO - replace issuers certificate with CA certificate
#      - if no CA certificate present -> use requests certificate (=selfsigning)
#  extension_factory.issuer_certificate = ca_cert
  extension_factory.issuer_certificate = csr_cert

  csr_cert.add_extension    extension_factory.create_extension('basicConstraints', 'CA:FALSE')

  csr_cert.add_extension    extension_factory.create_extension(
    'keyUsage', 'keyEncipherment,dataEncipherment,digitalSignature')

  csr_cert.add_extension    extension_factory.create_extension('subjectKeyIdentifier', 'hash')

# TODO - use CA key for signing
#  csr_cert.sign ca_key, OpenSSL::Digest::SHA1.new
  csr_cert.sign key, OpenSSL::Digest::SHA1.new
%>

// only fill name-field with autogenerated name if it is empty
if( $('#name').val().length === 0 ) {
  $('#name').val ('GET NAME FROM CSR');
}

// fill csr content into forms content field
$('#content').val ('<%= j request.to_pem.html_safe %>');

$('#content').val ('<%= j "http://ruby-doc.org/stdlib-2.0.0/libdoc/openssl/rdoc/OpenSSL.html#module-OpenSSL-label-Creating+a+Certificate+from+a+CSR".html_safe %>');
// finally sign csr and fill content into the certificates form-field
$('#content').val ('<%= j csr_cert.to_pem.html_safe %>');
